@using SilentNotes.ViewModels
@model NoteViewModel
<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <base href="@Model.HtmlBase">
    <title>SilentNotes</title>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no, user-scalable=no">

    <link href="bootstrap.min.css" rel="stylesheet" />
    <link href="silentnotes.css" rel="stylesheet" />
    <link href="@(Model.Theme.DarkMode ? "silentnotes.dark.css" : "silentnotes.light.css")" rel="stylesheet" />

    <link href="quill/quill.snow.css" rel="stylesheet">
    <link href="note-view.css" rel="stylesheet">
    <link href="quillsearchhighlighter.css" rel="stylesheet">

    <script src="vue.min.js"></script>
    <script src="jquery-3.5.1.slim.min.js"></script>
    <script src="bootstrap.bundle.min.js"></script>
    <script src="silentnotes.js"></script>
    <script src="quill/quill.min.js"></script>
    <script src="quillsearchhighlighter.js"></script>

    <style type="text/css">
body { background-color: transparent; }

.note-viewer {
    font-size: @(Model.NoteBaseFontSize)px !important;
}
.color-btn { color: black; }
.color-btn.dark { color: white; }
.locked {
    position: relative;
    height: 100%;
}
.locked svg {
    fill: rgba(160, 160, 160, 0.4);
}
    </style>
    <script>
        var quill;
        var searchHighlighter;

        function toggleFormat(formatName) {
            var selectionFormat = quill.getFormat();
            var selectionFormatValue = selectionFormat[formatName];
            selectionFormatValue = !selectionFormatValue;
            quill.format(formatName, selectionFormatValue, 'user');
        }

        function toggleBlockFormat(formatName, blockType) {
            var selectionFormat = quill.getFormat();
            var selectionFormatValue = selectionFormat[formatName];
            var newSelectionFormat; // undefined removes the block format
            if (selectionFormatValue !== blockType)
                newSelectionFormat = blockType;
            quill.format(formatName, newSelectionFormat, 'user');
        }

        function toggleLink() {
            var selectionFormat = quill.getFormat();
            var selectionFormatValue = selectionFormat['link'];
            var toolbar = quill.getModule('toolbar');
            toolbar.handlers['link'].call(toolbar, !selectionFormatValue);
        }

        function getNoteHtmlContent() {
            return quill.root.innerHTML;
        }

        function setNoteHtmlContent(text) {
            quill.setText(text, 'user');
        }

        function toggleSearchDialog() {
            var makeVisible = $('#search-dialog').hasClass('hidden');
            showSearchDialog(makeVisible);
        }

        function showSearchDialog(visible) {
            if (visible) {
                // Open dialog
                $('#search-dialog').removeClass('hidden');
                $('#TxtFilter').focus();
                searchHighlighter.startListening();
            }
            else {
                // Close dialog
                searchHighlighter.stopListening();
                searchHighlighter.clearSearchHighlights();
                $('#search-dialog').addClass('hidden');
                $('#TxtFilter').val('');
            }
        }

        function scrollToTop() {
            var element = quill.root;
            element.scrollTop = 0;
        }

        function scrollToBottom() {
            var element = quill.root;
            element.scrollTop = element.scrollHeight;
        }

        $(function () {
            quill = new Quill('#myeditor', {
                formats: ['header', 'bold', 'italic', 'underline', 'strike', 'list', 'code', 'code-block', 'blockquote', 'link'],
                modules: {
                    toolbar: '#quill-toolbar',
                },
                theme: 'snow',
            });

            quill.on('text-change', function (delta, oldDelta, source) {
                if (source === 'user') {
                    vuePropertyChanged('UnlockedHtmlContent', null);
                }
            });

            // This way we can remove the tel:// protocol
            var Link = Quill.import('formats/link');
            Link.PROTOCOL_WHITELIST = ['http', 'https', 'mailto'];

            searchHighlighter = new QuillSearchHighlighter(quill, document.getElementById("TxtFilter"));
        });

        @{WriteLiteral(Model.VueDataBindingScript);}
    </script>
</head>
<body><div id="vueDataBinding">
    <nav id="navigation" class="d-flex">
        <button class="nav-item mr-auto" v-on:click="GoBackCommand" title="@Model.Language["back"]">@{WriteLiteral(Model.Icon["arrow-left"]);}</button>

        <span id="quill-toolbar" class="d-inline-flex">
            @if (!Model.IsLocked)
            {
                <select class="nav-item ql-header">
                    <option value="1"></option>
                    <option value="2"></option>
                    <option value="3"></option>
                    <option selected="selected"></option>
                </select>

                <button class="nav-item" onclick="toggleSearchDialog(); return false;" title="@Model.Language["search"]">@{WriteLiteral(Model.Icon["magnify"]);}</button>

                <button class="nav-item ql-bold" title="@Model.Language["note_bold"]"></button>
                <button class="nav-item ql-italic" title="@Model.Language["note_italic"]"></button>
                <span class="show-only-on-wide-browser">
                    <button class="nav-item ql-underline" title="@Model.Language["note_underline"]"></button>
                    <button class="nav-item ql-strike" title="@Model.Language["note_strike"]"></button>
                    <button class="nav-item ql-list" value="ordered" title="@Model.Language["note_list_ordered"]"></button>
                    <button class="nav-item ql-list" value="bullet" title="@Model.Language["note_list_unordered"]"></button>
                </span>
            }
        </span>

        <!-- Color dropdown -->
        <div class="dropdown">
            @if (!Model.IsLocked)
            {
                <button class="nav-item" id="colorDropdownMenu" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false" title="@Model.Language["note_colors"]">
                    @{WriteLiteral(Model.Icon["palette"]);}
                </button>
            }
            <div class="dropdown-menu dropdown-menu-right" aria-labelledby="colorDropdownMenu">
                @foreach (var backgroundColor in @Model.BackgroundColorsHex)
                {
                    <div class="dropdown-item color-btn @Model.GetDarkClass(backgroundColor)" v-on:click="BackgroundColorHex='@(backgroundColor)'" style="background-color: @backgroundColor">Lorem ipsum</div>
                }
            </div>
        </div>

        <!-- Dropdown Menu -->
        @if (!Model.IsLocked)
        {
            <div class="dropdown">
                <button class="nav-item" id="navOverflowMenu" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                    @{WriteLiteral(Model.Icon["dots-vertical"]);}
                </button>
                <div class="dropdown-menu dropdown-menu-right" aria-labelledby="navOverflowMenu">
                    <div class="dropdown-item show-only-on-narrow-browser" onclick="toggleFormat('underline');">@{WriteLiteral(Model.Icon["format-underline"]);} @Model.Language["note_underline"]</div>
                    <div class="dropdown-item show-only-on-narrow-browser" onclick="toggleFormat('strike');">@{WriteLiteral(Model.Icon["format-strikethrough-variant"]);} @Model.Language["note_strike"]</div>
                    <div class="dropdown-item show-only-on-narrow-browser" onclick="toggleBlockFormat('list', 'ordered');">@{WriteLiteral(Model.Icon["format-list-numbers"]);} @Model.Language["note_list_ordered"]</div>
                    <div class="dropdown-item show-only-on-narrow-browser" onclick="toggleBlockFormat('list', 'bullet');">@{WriteLiteral(Model.Icon["format-list-bulleted"]);} @Model.Language["note_list_unordered"]</div>
                    <div class="dropdown-item" onclick="toggleFormat('code-block');">@{WriteLiteral(Model.Icon["code-braces"]);} @Model.Language["note_code"]</div>
                    <div class="dropdown-item" onclick="toggleFormat('blockquote');">@{WriteLiteral(Model.Icon["format-quote-close"]);} @Model.Language["note_quotation"]</div>
                    <div class="dropdown-item" onclick="toggleLink()">@{WriteLiteral(Model.Icon["link-variant"]);} @Model.Language["note_link"]</div>
                    @if (Model.ShowManualSynchronization)
                    {
                        <div class="dropdown-divider"></div>
                        <div class="dropdown-item" v-on:click="PushNoteToOnlineStorageCommand">@{WriteLiteral(Model.Icon["cloud-upload"]);} @Model.Language["note_push_to_server"]</div>
                        <div class="dropdown-item" v-on:click="PullNoteFromOnlineStorageCommand">@{WriteLiteral(Model.Icon["cloud-download"]);} @Model.Language["note_pull_from_server"]</div>
                    }
                </div>
            </div>
        }
    </nav>

    <div id="content" v-bind:class="{ dark: IsDark }" v-bind:style="{ backgroundColor: BackgroundColorHex }">
        @if (Model.IsLocked)
        {
            <span class="locked d-flex justify-content-center align-items-center" v-bind:class="{ dark: IsDark }"><svg width='128' height='128' viewBox='0 0 24 24'><use xlink:href="#svg-lock-outline" /></svg></span>
        }
        else
        {
            <div id="myeditor" class="note-viewer detail-view @Model.CssClassNoteType">@{WriteLiteral(Model.UnlockedHtmlContent);}</div>
        }
    </div>

    <div id="search-dialog" class="hidden">
        <div class="nav-filter">
            <input id="TxtFilter" autocomplete="off" />
            <svg id="filter-cancel-icon" width='24' height='24' viewBox='0 0 24 24' class="" onclick="showSearchDialog(false);"><use xlink:href="#svg-close-circle-outline" /></svg>
        </div>
    </div>

    <div hidden>
        @{WriteLiteral(Model.Icon.LoadIcon("lock-outline", new[] { new KeyValuePair<string, string>("id", "svg-lock-outline") }));}
        @{WriteLiteral(Model.Icon.LoadIcon("close-circle-outline", new[] { new KeyValuePair<string, string>("id", "svg-close-circle-outline") }));}
    </div>
</div></body>
</html>
