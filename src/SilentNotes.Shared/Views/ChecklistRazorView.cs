#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SilentNotes.Views
{
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

#line 1 "ChecklistRazorView.cshtml"
using SilentNotes.ViewModels;

#line default
#line hidden


[System.CodeDom.Compiler.GeneratedCodeAttribute("RazorTemplatePreprocessor", "16.11.0.190")]
public partial class ChecklistRazorView : ChecklistRazorViewBase
{

#line hidden

#line 2 "ChecklistRazorView.cshtml"
public NoteViewModel Model { get; set; }

#line default
#line hidden


public override void Execute()
{
WriteLiteral("<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <meta");

WriteLiteral(" http-equiv=\"X-UA-Compatible\"");

WriteLiteral(" content=\"IE=edge\"");

WriteLiteral(" />\r\n    <base");

WriteAttribute ("href", " href=\"", "\""

#line 7 "ChecklistRazorView.cshtml"
, Tuple.Create<string,object,bool> ("", Model.HtmlBase

#line default
#line hidden
, false)
);
WriteLiteral(">\r\n    <title>SilentNotes</title>\r\n    <meta");

WriteLiteral(" charset=\"UTF-8\"");

WriteLiteral(" />\r\n    <meta");

WriteLiteral(" name=\"viewport\"");

WriteLiteral(" content=\"width=device-width, initial-scale=1, shrink-to-fit=no, user-scalable=no" +
"\"");

WriteLiteral(">\r\n\r\n    <link");

WriteLiteral(" href=\"bootstrap.min.css\"");

WriteLiteral(" rel=\"stylesheet\"");

WriteLiteral(" />\r\n    <link");

WriteLiteral(" href=\"silentnotes.css\"");

WriteLiteral(" rel=\"stylesheet\"");

WriteLiteral(" />\r\n    <link");

WriteAttribute ("href", " href=\"", "\""

#line 14 "ChecklistRazorView.cshtml"
, Tuple.Create<string,object,bool> ("", Model.Theme.DarkMode ? "silentnotes.dark.css" : "silentnotes.light.css"

#line default
#line hidden
, false)
);
WriteLiteral(" rel=\"stylesheet\"");

WriteLiteral(" />\r\n\r\n    <link");

WriteLiteral(" href=\"quill/quill.snow.css\"");

WriteLiteral(" rel=\"stylesheet\"");

WriteLiteral(">\r\n    <link");

WriteLiteral(" href=\"note-view.css\"");

WriteLiteral(" rel=\"stylesheet\"");

WriteLiteral(">\r\n    <link");

WriteLiteral(" href=\"quillsearchhighlighter.css\"");

WriteLiteral(" rel=\"stylesheet\"");

WriteLiteral(">\r\n\r\n    <script");

WriteAttribute ("src", " src=\"", "\""

#line 20 "ChecklistRazorView.cshtml"
, Tuple.Create<string,object,bool> ("", Model.HtmlRecource["vuejs"]

#line default
#line hidden
, false)
);
WriteLiteral("></script>\r\n    <script");

WriteAttribute ("src", " src=\"", "\""

#line 21 "ChecklistRazorView.cshtml"
, Tuple.Create<string,object,bool> ("", Model.HtmlRecource["jqueryjs"]

#line default
#line hidden
, false)
);
WriteLiteral("></script>\r\n    <script");

WriteAttribute ("src", " src=\"", "\""

#line 22 "ChecklistRazorView.cshtml"
, Tuple.Create<string,object,bool> ("", Model.HtmlRecource["bootstrapjs"]

#line default
#line hidden
, false)
);
WriteLiteral("></script>\r\n    <script");

WriteAttribute ("src", " src=\"", "\""

#line 23 "ChecklistRazorView.cshtml"
, Tuple.Create<string,object,bool> ("", Model.HtmlRecource["bootstrapautocompletejs"]

#line default
#line hidden
, false)
);
WriteLiteral("></script>\r\n    <script");

WriteLiteral(" src=\"silentnotes.js\"");

WriteLiteral("></script>\r\n    <script");

WriteLiteral(" src=\"checklist.js\"");

WriteLiteral("></script>\r\n    <script");

WriteLiteral(" src=\"quill/quill.min.js\"");

WriteLiteral("></script>\r\n    <script");

WriteLiteral(" src=\"quillsearchhighlighter.js\"");

WriteLiteral("></script>\r\n\r\n    <style");

WriteLiteral(" type=\"text/css\"");

WriteLiteral(">\r\nbody { background-color: transparent; }\r\n\r\n.note-viewer {\r\n    font-size: ");


#line 33 "ChecklistRazorView.cshtml"
           Write(Model.NoteBaseFontSize);


#line default
#line hidden
WriteLiteral("px !important;\r\n}\r\ndiv .detail-view.checklist .ql-editor p::before { content: ");


#line 35 "ChecklistRazorView.cshtml"
                                                             WriteLiteral(Model.Icon.LoadIconAsCssUrl("checkbox-blank-outline", new[] { new KeyValuePair<string, string>("fill", "#000000") }));

#line default
#line hidden
WriteLiteral("; }\r\ndiv .detail-view.checklist .ql-editor p.done::before { content: ");


#line 36 "ChecklistRazorView.cshtml"
                                                                  WriteLiteral(Model.Icon.LoadIconAsCssUrl("check-box-outline", new[] { new KeyValuePair<string, string>("fill", "#000000") }));

#line default
#line hidden
WriteLiteral("; }\r\ndiv .detail-view.checklist .ql-editor p.disabled::before { content: ");


#line 37 "ChecklistRazorView.cshtml"
                                                                      WriteLiteral(Model.Icon.LoadIconAsCssUrl("checkbox-blank-outline", new[] { new KeyValuePair<string, string>("fill", "#000000") }));

#line default
#line hidden
WriteLiteral("; }\r\ndiv .detail-view.checklist .ql-editor p::after { content: ");


#line 38 "ChecklistRazorView.cshtml"
                                                            WriteLiteral(Model.Icon.LoadIconAsCssUrl("delete", new[] { new KeyValuePair<string, string>("fill", "#000000") }));

#line default
#line hidden
WriteLiteral("; }\r\ndiv.dark .detail-view.checklist .ql-editor p::before { content: ");


#line 39 "ChecklistRazorView.cshtml"
                                                                  WriteLiteral(Model.Icon.LoadIconAsCssUrl("checkbox-blank-outline", new[] { new KeyValuePair<string, string>("fill", "#FFFFFF") }));

#line default
#line hidden
WriteLiteral("; }\r\ndiv.dark .detail-view.checklist .ql-editor p.done::before { content: ");


#line 40 "ChecklistRazorView.cshtml"
                                                                       WriteLiteral(Model.Icon.LoadIconAsCssUrl("check-box-outline", new[] { new KeyValuePair<string, string>("fill", "#FFFFFF") }));

#line default
#line hidden
WriteLiteral("; }\r\ndiv.dark .detail-view.checklist .ql-editor p.disabled::before { content: ");


#line 41 "ChecklistRazorView.cshtml"
                                                                           WriteLiteral(Model.Icon.LoadIconAsCssUrl("checkbox-blank-outline", new[] { new KeyValuePair<string, string>("fill", "#FFFFFF") }));

#line default
#line hidden
WriteLiteral("; }\r\ndiv.dark .detail-view.checklist .ql-editor p::after { content: ");


#line 42 "ChecklistRazorView.cshtml"
                                                                 WriteLiteral(Model.Icon.LoadIconAsCssUrl("delete", new[] { new KeyValuePair<string, string>("fill", "#FFFFFF") }));

#line default
#line hidden
WriteLiteral("; }\r\n\r\n.color-btn { color: black; }\r\n.color-btn.dark { color: white; }\r\n.locked {" +
"\r\n    position: relative;\r\n    height: 100%;\r\n}\r\n.locked svg {\r\n    fill: rgba(1" +
"60, 160, 160, 0.4);\r\n}\r\n#pretty-time-ago {\r\n    position: fixed;\r\n    display: i" +
"nline-block;\r\n    margin: 0;\r\n    padding: 0.1em 0.8em 0.15em 0.8em;\r\n    right:" +
" 0;\r\n    bottom: 0;\r\n    color: black;\r\n    background-color: rgba(128, 128, 128" +
", 0.2);\r\n\tpointer-events: none; /* do not prevent clicks on recyclebin */\r\n}\r\n#p" +
"retty-time-ago.dark {\r\n    color: white;\r\n    background-color: rgba(211, 211, 2" +
"11, 0.3);\r\n}\r\n\r\n    </style>\r\n    <script>\r\n        var quill;\r\n        var sear" +
"chHighlighter;\r\n\r\n        function toggleFormat(formatName) {\r\n            var s" +
"electionFormat = quill.getFormat();\r\n            var selectionFormatValue = sele" +
"ctionFormat[formatName];\r\n            selectionFormatValue = !selectionFormatVal" +
"ue;\r\n            quill.format(formatName, selectionFormatValue, \'user\');\r\n      " +
"      refreshActiveFormatState();\r\n        }\r\n\r\n        function toggleBlockForm" +
"at(formatName, blockType) {\r\n            var selectionFormat = quill.getFormat()" +
";\r\n            var selectionFormatValue = selectionFormat[formatName];\r\n        " +
"    var newSelectionFormat; // undefined removes the block format\r\n            i" +
"f (selectionFormatValue !== blockType)\r\n                newSelectionFormat = blo" +
"ckType;\r\n            quill.format(formatName, newSelectionFormat, \'user\');\r\n    " +
"        refreshActiveFormatState();\r\n        }\r\n\r\n        function addTag() {\r\n " +
"           var tagText = document.getElementById(\'tags\').value.trim();\r\n        " +
"    if (vm.ShoppingModeActive || tagText === \'\')\r\n                return;\r\n     " +
"       document.getElementById(\'tags\').value = \'\';\r\n            vueCommandExecut" +
"e(\'AddTagCommand\', tagText);\r\n        }\r\n\r\n        function deleteTag(e) {\r\n    " +
"        if (vm.ShoppingModeActive)\r\n                return;\r\n            vueComm" +
"andExecute(\'DeleteTagCommand\', e.currentTarget.attributes[\'data-tag\'].value);\r\n " +
"       }\r\n\r\n        function getTagSuggestions() {\r\n            return vm.$data." +
"TagSuggestions.map(function (item) {\r\n                return { value: item }\r\n  " +
"          });\r\n        }\r\n\r\n        function getNoteHtmlContent() {\r\n           " +
" return quill.root.innerHTML;\r\n        }\r\n\r\n        function setNoteHtmlContent(" +
"text) {\r\n            quill.setText(text, \'user\');\r\n        }\r\n\r\n        function" +
" isSearchDialogHidden() {\r\n            return $(\'#search-dialog\').hasClass(\'hidd" +
"en\');\r\n        }\r\n\r\n        function toggleSearchDialog() {\r\n            showSea" +
"rchDialog(isSearchDialogHidden());\r\n        }\r\n\r\n        function showSearchDial" +
"og(visible) {\r\n            if (visible) {\r\n                // Open dialog\r\n     " +
"           $(\'#search-dialog\').removeClass(\'hidden\');\r\n                $(\'#TxtFi" +
"lter\').focus();\r\n                searchHighlighter.startListening();\r\n          " +
"  }\r\n            else {\r\n                // Close dialog\r\n                search" +
"Highlighter.stopListening();\r\n                searchHighlighter.clearSearchHighl" +
"ights();\r\n                $(\'#search-dialog\').addClass(\'hidden\');\r\n             " +
"   $(\'#TxtFilter\').val(\'\');\r\n            }\r\n        }\r\n\r\n        function setSta" +
"rtingSearchFilter(filter) {\r\n            searchHighlighter.searchAndHighlight(fi" +
"lter, true, false); // this causes a focusin event\r\n            quill.root.blur(" +
");\r\n            vm.PrettyTimeAgoVisible = true; // the focusin event closed the " +
"date.\r\n        }\r\n\r\n        function scrollToTop() {\r\n            var element = " +
"quill.root;\r\n            element.scrollTop = 0;\r\n        }\r\n\r\n        function s" +
"crollToBottom() {\r\n            var element = quill.root;\r\n            element.sc" +
"rollTop = element.scrollHeight;\r\n        }\r\n\r\n        function toggleShoppingMod" +
"e() {\r\n            vm.ShoppingModeActive = !vm.ShoppingModeActive;\r\n            " +
"quill.enable(!vm.ShoppingModeActive);\r\n        }\r\n\r\n        function refreshActi" +
"veFormatState() {\r\n            var selectionFormat = quill.getFormat();\r\n       " +
"     var formatValue = selectionFormat[\'header\'];\r\n            vm.Header1Active " +
"= formatValue == 1;\r\n            vm.Header2Active = formatValue == 2;\r\n         " +
"   vm.Header3Active = formatValue == 3;\r\n            formatValue = selectionForm" +
"at[\'list\'];\r\n            vm.ListOrderedActive = formatValue == \'ordered\';\r\n     " +
"       vm.ListBulletActive = formatValue == \'bullet\';\r\n            vm.CodeActive" +
" = selectionFormat[\'code-block\'];\r\n            vm.QuoteActive = selectionFormat[" +
"\'blockquote\'];\r\n            vm.UnderlineActive = selectionFormat[\'underline\'];\r\n" +
"            vm.StrikeActive = selectionFormat[\'strike\'];\r\n        }\r\n\r\n        f" +
"unction vueLoaded() {\r\n            // quill \"imports\" the existing html content " +
"and looses the class attributes,\r\n            // that\'s why we save and reapply " +
"the check states.\r\n            var checkStates = saveCheckStates();\r\n           " +
" quill = new Quill(\'#myeditor\', {\r\n                formats: [\'header\'],\r\n       " +
"     });\r\n            restoreCheckStates(checkStates);\r\n\r\n            quill.on(\'" +
"text-change\', function (delta, oldDelta, source) {\r\n                if (source =" +
"== \'user\') {\r\n                    vuePropertyChanged(\'UnlockedHtmlContent\', null" +
");\r\n                }\r\n            });\r\n\r\n            quill.on(\'selection-change" +
"\', function (range, oldRange, source) {\r\n                if (range) {\r\n         " +
"           refreshActiveFormatState();\r\n                }\r\n            });\r\n\r\n  " +
"          $(quill.root).on(\"focusin\", function () {\r\n                vm.PrettyTi" +
"meAgoVisible = false;\r\n                if (isSearchDialogHidden())\r\n            " +
"        searchHighlighter.clearSearchHighlights();\r\n            });\r\n\r\n         " +
"   searchHighlighter = new QuillSearchHighlighter(quill, document.getElementById" +
"(\"TxtFilter\"));\r\n\r\n            var noteContent = getNoteHtmlContent();\r\n        " +
"    var noteIsNew = noteContent.length > 1 && noteContent.length < 42 && noteCon" +
"tent.replace(/<[^>]*>/g, \'\').trim().length == 0;\r\n            if (noteIsNew) {\r\n" +
"                toggleBlockFormat(\'header\', 1);\r\n            }\r\n\r\n            qu" +
"ill.enable(!vm.ShoppingModeActive);\r\n\r\n            $(\"#tags\").autocomplete({\r\n  " +
"              source: getTagSuggestions,\r\n                treshold: 0,\r\n        " +
"        maximumItems: 10,\r\n                value: \"value\",\r\n                labe" +
"l: \"value\",\r\n                dropType: \"dropup\",\r\n                onSelectItem: " +
"function (item, inputField) {\r\n                    addTag();\r\n                }," +
"\r\n            });\r\n            document.getElementById(\'tags\').addEventListener(" +
"\"keyup\", function (event) {\r\n                if (event.key === \'Enter\' || event." +
"keyCode === 13) {\r\n                    addTag();\r\n                }\r\n           " +
" });\r\n        };\r\n\r\n");


#line 235 "ChecklistRazorView.cshtml"
        

#line default
#line hidden

#line 235 "ChecklistRazorView.cshtml"
          WriteLiteral(Model.VueDataBindingScript);

#line default
#line hidden
WriteLiteral("\r\n    </script>\r\n</head>\r\n<body><div");

WriteLiteral(" id=\"vueDataBinding\"");

WriteLiteral(">\r\n    <nav");

WriteLiteral(" id=\"navigation\"");

WriteLiteral(" class=\"d-flex\"");

WriteLiteral(">\r\n        <button");

WriteLiteral(" class=\"nav-item mr-auto\"");

WriteLiteral(" v-on:click=\"GoBackCommand\"");

WriteAttribute ("title", " title=\"", "\""

#line 240 "ChecklistRazorView.cshtml"
                                    , Tuple.Create<string,object,bool> ("", Model.Language["back"]

#line default
#line hidden
, false)
);
WriteLiteral(">");


#line 240 "ChecklistRazorView.cshtml"
                                                                                                      WriteLiteral(Model.Icon["arrow-left"]);

#line default
#line hidden
WriteLiteral("</button>\r\n\r\n");


#line 242 "ChecklistRazorView.cshtml"
        

#line default
#line hidden

#line 242 "ChecklistRazorView.cshtml"
         if (!Model.IsLocked)
        {


#line default
#line hidden
WriteLiteral("            <button");

WriteLiteral(" class=\"nav-item\"");

WriteLiteral(" onclick=\"moveUp(true); return false;\"");

WriteLiteral(" v-bind:disabled=\"ShoppingModeActive\"");

WriteAttribute ("title", " title=\"", "\""

#line 244 "ChecklistRazorView.cshtml"
                                                                                , Tuple.Create<string,object,bool> ("", Model.Language["checklist_move_to_top"]

#line default
#line hidden
, false)
);
WriteLiteral(">");


#line 244 "ChecklistRazorView.cshtml"
                                                                                                                                                                   WriteLiteral(Model.Icon["arrow-collapse-up"]);

#line default
#line hidden
WriteLiteral("</button>\r\n");

WriteLiteral("            <button");

WriteLiteral(" class=\"nav-item\"");

WriteLiteral(" onclick=\"moveUp(false); return false;\"");

WriteLiteral(" v-bind:disabled=\"ShoppingModeActive\"");

WriteAttribute ("title", " title=\"", "\""

#line 245 "ChecklistRazorView.cshtml"
                                                                                 , Tuple.Create<string,object,bool> ("", Model.Language["checklist_move_up"]

#line default
#line hidden
, false)
);
WriteLiteral(">");


#line 245 "ChecklistRazorView.cshtml"
                                                                                                                                                                WriteLiteral(Model.Icon["arrow-up"]);

#line default
#line hidden
WriteLiteral("</button>\r\n");

WriteLiteral("            <button");

WriteLiteral(" class=\"nav-item\"");

WriteLiteral(" onclick=\"moveDown(false); return false;\"");

WriteLiteral(" v-bind:disabled=\"ShoppingModeActive\"");

WriteAttribute ("title", " title=\"", "\""

#line 246 "ChecklistRazorView.cshtml"
                                                                                   , Tuple.Create<string,object,bool> ("", Model.Language["checklist_move_down"]

#line default
#line hidden
, false)
);
WriteLiteral(">");


#line 246 "ChecklistRazorView.cshtml"
                                                                                                                                                                    WriteLiteral(Model.Icon["arrow-down"]);

#line default
#line hidden
WriteLiteral("</button>\r\n");

WriteLiteral("            <button");

WriteLiteral(" class=\"nav-item\"");

WriteLiteral(" onclick=\"moveDown(true); return false;\"");

WriteLiteral(" v-bind:disabled=\"ShoppingModeActive\"");

WriteAttribute ("title", " title=\"", "\""

#line 247 "ChecklistRazorView.cshtml"
                                                                                  , Tuple.Create<string,object,bool> ("", Model.Language["checklist_move_to_bottom"]

#line default
#line hidden
, false)
);
WriteLiteral(">");


#line 247 "ChecklistRazorView.cshtml"
                                                                                                                                                                        WriteLiteral(Model.Icon["arrow-collapse-down"]);

#line default
#line hidden
WriteLiteral("</button>\r\n");

WriteLiteral("            <button");

WriteLiteral(" class=\"nav-item\"");

WriteLiteral(" onclick=\"toggleShoppingMode(); return false;\"");

WriteLiteral(" v-bind:class=\"{ active: ShoppingModeActive }\"");

WriteAttribute ("title", " title=\"", "\""

#line 248 "ChecklistRazorView.cshtml"
                                                                                                 , Tuple.Create<string,object,bool> ("", Model.Language["note_shopping_mode"]

#line default
#line hidden
, false)
);
WriteLiteral(">");


#line 248 "ChecklistRazorView.cshtml"
                                                                                                                                                                                 WriteLiteral(Model.Icon["keyboard_off_outline"]);

#line default
#line hidden
WriteLiteral("</button>\r\n");

WriteLiteral("            <button");

WriteLiteral(" class=\"nav-item\"");

WriteLiteral(" onclick=\"toggleSearchDialog(); return false;\"");

WriteAttribute ("title", " title=\"", "\""

#line 249 "ChecklistRazorView.cshtml"
                                                   , Tuple.Create<string,object,bool> ("", Model.Language["search"]

#line default
#line hidden
, false)
);
WriteLiteral(">");


#line 249 "ChecklistRazorView.cshtml"
                                                                                                                       WriteLiteral(Model.Icon["magnify"]);

#line default
#line hidden
WriteLiteral("</button>\r\n");


#line 250 "ChecklistRazorView.cshtml"



#line default
#line hidden
WriteLiteral("            <div");

WriteLiteral(" class=\"dropdown\"");

WriteLiteral(">\r\n                <button");

WriteLiteral(" class=\"nav-item\"");

WriteLiteral(" id=\"navOverflowMenu\"");

WriteLiteral(" data-toggle=\"dropdown\"");

WriteLiteral(" aria-haspopup=\"true\"");

WriteLiteral(" aria-expanded=\"false\"");

WriteLiteral(" v-bind:disabled=\"ShoppingModeActive\"");

WriteLiteral(">\r\n");


#line 253 "ChecklistRazorView.cshtml"
                    

#line default
#line hidden

#line 253 "ChecklistRazorView.cshtml"
                      WriteLiteral(Model.Icon["dots-vertical"]);

#line default
#line hidden
WriteLiteral("\r\n                </button>\r\n                <div");

WriteLiteral(" class=\"dropdown-menu dropdown-menu-right\"");

WriteLiteral(" aria-labelledby=\"navOverflowMenu\"");

WriteLiteral(">\r\n                    <div");

WriteLiteral(" class=\"dropdown-item\"");

WriteLiteral(" data-toggle=\"modal\"");

WriteLiteral(" data-target=\"#colorPaletteModal\"");

WriteLiteral(">");


#line 256 "ChecklistRazorView.cshtml"
                                                                                                      WriteLiteral(Model.Icon["palette"]);

#line default
#line hidden
WriteLiteral(" ");


#line 256 "ChecklistRazorView.cshtml"
                                                                                                                                       Write(Model.Language["note_colors"]);


#line default
#line hidden
WriteLiteral("</div>\r\n                    <div");

WriteLiteral(" class=\"dropdown-divider\"");

WriteLiteral("></div>\r\n                    <div");

WriteLiteral(" class=\"dropdown-item\"");

WriteLiteral(" onclick=\"movePendingToTop(); return false;\"");

WriteLiteral(">");


#line 258 "ChecklistRazorView.cshtml"
                                                                                             WriteLiteral(Model.Icon["sort-bool-descending-variant"]);

#line default
#line hidden
WriteLiteral(" ");


#line 258 "ChecklistRazorView.cshtml"
                                                                                                                                                   Write(Model.Language["checklist_move_pending_to_top"]);


#line default
#line hidden
WriteLiteral("</div>\r\n                    <div");

WriteLiteral(" class=\"dropdown-item\"");

WriteLiteral(" onclick=\"setCheckedStateForAll(false, false); return false;\"");

WriteLiteral(">");


#line 259 "ChecklistRazorView.cshtml"
                                                                                                              WriteLiteral(Model.Icon["checkbox-multiple-blank-outline"]);

#line default
#line hidden
WriteLiteral(" ");


#line 259 "ChecklistRazorView.cshtml"
                                                                                                                                                                       Write(Model.Language["checklist_uncheck_all"]);


#line default
#line hidden
WriteLiteral("</div>\r\n                    <div");

WriteLiteral(" class=\"dropdown-item\"");

WriteLiteral(" onclick=\"setCheckedStateForAll(true, false); return false;\"");

WriteLiteral(">");


#line 260 "ChecklistRazorView.cshtml"
                                                                                                             WriteLiteral(Model.Icon["check-box-multiple-outline"]);

#line default
#line hidden
WriteLiteral(" ");


#line 260 "ChecklistRazorView.cshtml"
                                                                                                                                                                 Write(Model.Language["checklist_check_all"]);


#line default
#line hidden
WriteLiteral("</div>\r\n                    <div");

WriteLiteral(" class=\"dropdown-item\"");

WriteLiteral(" onclick=\"setCheckedStateForAll(false, true); return false;\"");

WriteLiteral(">");


#line 261 "ChecklistRazorView.cshtml"
                                                                                                             WriteLiteral(Model.Icon["checkbox-blank-off-outline"]);

#line default
#line hidden
WriteLiteral(" ");


#line 261 "ChecklistRazorView.cshtml"
                                                                                                                                                                 Write(Model.Language["checklist_disable_all"]);


#line default
#line hidden
WriteLiteral("</div>\r\n                    <div");

WriteLiteral(" class=\"dropdown-divider\"");

WriteLiteral("></div>\r\n                    <div");

WriteLiteral(" class=\"dropdown-item\"");

WriteLiteral(" v-bind:class=\"{ active: Header1Active }\"");

WriteLiteral(" onclick=\"toggleBlockFormat(\'header\', 1);\"");

WriteLiteral(">");


#line 263 "ChecklistRazorView.cshtml"
                                                                                                                                    WriteLiteral(Model.Icon["format-header-1"]);

#line default
#line hidden
WriteLiteral(" ");


#line 263 "ChecklistRazorView.cshtml"
                                                                                                                                                                             Write(Model.Language["note_header1"]);


#line default
#line hidden
WriteLiteral("</div>\r\n                    <div");

WriteLiteral(" class=\"dropdown-item\"");

WriteLiteral(" v-bind:class=\"{ active: Header2Active }\"");

WriteLiteral(" onclick=\"toggleBlockFormat(\'header\', 2);\"");

WriteLiteral(">");


#line 264 "ChecklistRazorView.cshtml"
                                                                                                                                    WriteLiteral(Model.Icon["format-header-2"]);

#line default
#line hidden
WriteLiteral(" ");


#line 264 "ChecklistRazorView.cshtml"
                                                                                                                                                                             Write(Model.Language["note_header2"]);


#line default
#line hidden
WriteLiteral("</div>\r\n");


#line 265 "ChecklistRazorView.cshtml"
                    

#line default
#line hidden

#line 265 "ChecklistRazorView.cshtml"
                     if (Model.ShowManualSynchronization)
                    {


#line default
#line hidden
WriteLiteral("                        <div");

WriteLiteral(" class=\"dropdown-divider\"");

WriteLiteral("></div>\r\n");

WriteLiteral("                        <div");

WriteLiteral(" class=\"dropdown-item\"");

WriteLiteral(" v-on:click=\"PushNoteToOnlineStorageCommand\"");

WriteLiteral(">");


#line 268 "ChecklistRazorView.cshtml"
                                                                                                 WriteLiteral(Model.Icon["cloud-upload"]);

#line default
#line hidden
WriteLiteral(" ");


#line 268 "ChecklistRazorView.cshtml"
                                                                                                                                       Write(Model.Language["note_push_to_server"]);


#line default
#line hidden
WriteLiteral("</div>\r\n");

WriteLiteral("                        <div");

WriteLiteral(" class=\"dropdown-item\"");

WriteLiteral(" v-on:click=\"PullNoteFromOnlineStorageCommand\"");

WriteLiteral(">");


#line 269 "ChecklistRazorView.cshtml"
                                                                                                   WriteLiteral(Model.Icon["cloud-download"]);

#line default
#line hidden
WriteLiteral(" ");


#line 269 "ChecklistRazorView.cshtml"
                                                                                                                                           Write(Model.Language["note_pull_from_server"]);


#line default
#line hidden
WriteLiteral("</div>\r\n");


#line 270 "ChecklistRazorView.cshtml"
                    }


#line default
#line hidden
WriteLiteral("                </div>\r\n            </div>\r\n");


#line 273 "ChecklistRazorView.cshtml"
        }


#line default
#line hidden
WriteLiteral("    </nav>\r\n\r\n    <div");

WriteLiteral(" id=\"content\"");

WriteLiteral(" v-bind:class=\"{ dark: IsDark }\"");

WriteLiteral(" v-bind:style=\"{ backgroundColor: BackgroundColorHex }\"");

WriteLiteral(">\r\n");


#line 277 "ChecklistRazorView.cshtml"
        

#line default
#line hidden

#line 277 "ChecklistRazorView.cshtml"
         if (Model.IsLocked)
        {


#line default
#line hidden
WriteLiteral("            <span");

WriteLiteral(" class=\"locked d-flex justify-content-center align-items-center\"");

WriteLiteral(" v-bind:class=\"{ dark: IsDark }\"");

WriteLiteral("><svg");

WriteLiteral(" width=\'128\'");

WriteLiteral(" height=\'128\'");

WriteLiteral(" viewBox=\'0 0 24 24\'");

WriteLiteral("><use");

WriteLiteral(" xlink:href=\"#svg-lock-outline\"");

WriteLiteral(" /></svg></span>\r\n");


#line 280 "ChecklistRazorView.cshtml"
        }
        else
        {


#line default
#line hidden
WriteLiteral("            <div");

WriteLiteral(" id=\"myeditor\"");

WriteAttribute ("class", " class=\"", "\""
, Tuple.Create<string,object,bool> ("", "note-viewer", true)
, Tuple.Create<string,object,bool> (" ", "detail-view", true)

#line 283 "ChecklistRazorView.cshtml"
                      , Tuple.Create<string,object,bool> (" ", Model.CssClassNoteType

#line default
#line hidden
, false)
);
WriteLiteral(">");


#line 283 "ChecklistRazorView.cshtml"
                                                                                         WriteLiteral(Model.UnlockedHtmlContent);

#line default
#line hidden
WriteLiteral("</div>\r\n");


#line 284 "ChecklistRazorView.cshtml"
        }


#line default
#line hidden
WriteLiteral("    </div>\r\n\r\n    <div");

WriteLiteral(" id=\"tag-container\"");

WriteLiteral(" v-bind:class=\"{ dark: IsDark }\"");

WriteLiteral(">\r\n        <div");

WriteLiteral(" class=\"tag-input-group\"");

WriteLiteral(">\r\n            <div");

WriteLiteral(" class=\"input-group\"");

WriteLiteral(">\r\n                <input");

WriteLiteral(" id=\"tags\"");

WriteLiteral(" class=\"form-control\"");

WriteLiteral(" v-bind:disabled=\"ShoppingModeActive\"");

WriteAttribute ("placeholder", " placeholder=\'", "\'"

#line 290 "ChecklistRazorView.cshtml"
                                                                 , Tuple.Create<string,object,bool> ("", Model.Language["tag_add"]

#line default
#line hidden
, false)
);
WriteLiteral(" type=\"text\"");

WriteLiteral(">\r\n                <div");

WriteLiteral(" class=\"input-group-append\"");

WriteLiteral(">\r\n                    <div");

WriteLiteral(" id=\"add-tag\"");

WriteLiteral(" class=\"btn\"");

WriteLiteral(" onclick=\"addTag();\"");

WriteLiteral("><svg");

WriteLiteral(" width=\'16\'");

WriteLiteral(" height=\'16\'");

WriteLiteral(" viewBox=\'0 0 24 24\'");

WriteLiteral("><use");

WriteLiteral(" xlink:href=\"#svg-plus\"");

WriteLiteral(" /></svg></div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    " +
"    <ul");

WriteLiteral(" class=\"tag-list\"");

WriteLiteral(">\r\n            <li");

WriteLiteral(" class=\"tag-item\"");

WriteLiteral(" v-bind:style=\"{ backgroundColor: BackgroundColorHex }\"");

WriteLiteral(" v-for=\"Tag in Tags\"");

WriteLiteral(">\r\n                {{Tag}}\r\n                <div");

WriteLiteral(" class=\"tag-handle\"");

WriteLiteral(" onclick=\"deleteTag(event);\"");

WriteLiteral(" v-bind:data-tag=\"Tag\"");

WriteLiteral("><svg");

WriteLiteral(" width=\'16\'");

WriteLiteral(" height=\'16\'");

WriteLiteral(" viewBox=\'0 0 24 24\'");

WriteLiteral("><use");

WriteLiteral(" xlink:href=\"#svg-delete\"");

WriteLiteral(" /></svg></div>\r\n            </li>\r\n        </ul>\r\n    </div>\r\n\r\n    ");

WriteLiteral("\r\n\r\n    <div");

WriteLiteral(" id=\"search-dialog\"");

WriteLiteral(" class=\"hidden\"");

WriteLiteral(">\r\n        <div");

WriteLiteral(" class=\"nav-filter\"");

WriteLiteral(">\r\n            <input");

WriteLiteral(" id=\"TxtFilter\"");

WriteLiteral(" autocomplete=\"off\"");

WriteLiteral(" />\r\n            <svg");

WriteLiteral(" id=\"filter-cancel-icon\"");

WriteLiteral(" width=\'24\'");

WriteLiteral(" height=\'24\'");

WriteLiteral(" viewBox=\'0 0 24 24\'");

WriteLiteral(" class=\"\"");

WriteLiteral(" onclick=\"showSearchDialog(false);\"");

WriteLiteral("><use");

WriteLiteral(" xlink:href=\"#svg-close-circle-outline\"");

WriteLiteral(" /></svg>\r\n        </div>\r\n    </div>\r\n\r\n    <div");

WriteLiteral(" class=\"modal\"");

WriteLiteral(" id=\"colorPaletteModal\"");

WriteLiteral(" tabindex=\"-1\"");

WriteLiteral(" role=\"dialog\"");

WriteLiteral(" aria-hidden=\"true\"");

WriteLiteral(">\r\n        <div");

WriteLiteral(" class=\"modal-dialog modal-sm\"");

WriteLiteral(" role=\"document\"");

WriteLiteral(">\r\n            <div");

WriteLiteral(" class=\"modal-content p-2\"");

WriteLiteral(">\r\n                <button");

WriteLiteral(" type=\"button\"");

WriteLiteral(" class=\"close d-flex justify-content-end\"");

WriteLiteral(" data-dismiss=\"modal\"");

WriteLiteral(" aria-label=\"Close\"");

WriteLiteral(">\r\n                    <span");

WriteLiteral(" aria-hidden=\"true\"");

WriteLiteral(">&times;</span>\r\n                </button>\r\n                <div");

WriteLiteral(" class=\"d-flex flex-wrap\"");

WriteLiteral(">\r\n");


#line 320 "ChecklistRazorView.cshtml"
                    

#line default
#line hidden

#line 320 "ChecklistRazorView.cshtml"
                     foreach (var backgroundColor in @Model.BackgroundColorsHex)
                    {


#line default
#line hidden
WriteLiteral("                        <div");

WriteAttribute ("class", " class=\"", "\""
, Tuple.Create<string,object,bool> ("", "d-flex", true)
, Tuple.Create<string,object,bool> (" ", "align-items-center", true)
, Tuple.Create<string,object,bool> (" ", "justify-content-center", true)
, Tuple.Create<string,object,bool> (" ", "color-btn", true)

#line 322 "ChecklistRazorView.cshtml"
                                                       , Tuple.Create<string,object,bool> (" ", Model.GetDarkClass(backgroundColor)

#line default
#line hidden
, false)
);
WriteLiteral(" data-dismiss=\"modal\"");

WriteAttribute ("v-on:click", " v-on:click=\"", "\""
, Tuple.Create<string,object,bool> ("", "BackgroundColorHex=\'", true)

#line 322 "ChecklistRazorView.cshtml"
                                                                                                                                                    , Tuple.Create<string,object,bool> ("", backgroundColor

#line default
#line hidden
, false)
, Tuple.Create<string,object,bool> ("", "\'", true)
);
WriteAttribute ("style", " style=\"", "\""
, Tuple.Create<string,object,bool> ("", "background-color:", true)

#line 322 "ChecklistRazorView.cshtml"
                                                                                                                                                                                                , Tuple.Create<string,object,bool> (" ", backgroundColor

#line default
#line hidden
, false)
);
WriteLiteral("><span>Lorem ipsum</span></div>\r\n");


#line 323 "ChecklistRazorView.cshtml"
                    }


#line default
#line hidden
WriteLiteral("                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n    <di" +
"v hidden>\r\n");


#line 330 "ChecklistRazorView.cshtml"
        

#line default
#line hidden

#line 330 "ChecklistRazorView.cshtml"
          WriteLiteral(Model.Icon.LoadIcon("lock-outline", new[] { new KeyValuePair<string, string>("id", "svg-lock-outline") }));

#line default
#line hidden
WriteLiteral("\r\n");


#line 331 "ChecklistRazorView.cshtml"
        

#line default
#line hidden

#line 331 "ChecklistRazorView.cshtml"
          WriteLiteral(Model.Icon.LoadIcon("delete", new[] { new KeyValuePair<string, string>("id", "svg-delete") }));

#line default
#line hidden
WriteLiteral("\r\n");


#line 332 "ChecklistRazorView.cshtml"
        

#line default
#line hidden

#line 332 "ChecklistRazorView.cshtml"
          WriteLiteral(Model.Icon.LoadIcon("close-circle-outline", new[] { new KeyValuePair<string, string>("id", "svg-close-circle-outline") }));

#line default
#line hidden
WriteLiteral("\r\n");


#line 333 "ChecklistRazorView.cshtml"
        

#line default
#line hidden

#line 333 "ChecklistRazorView.cshtml"
          WriteLiteral(Model.Icon.LoadIcon("plus", new[] { new KeyValuePair<string, string>("id", "svg-plus") }));

#line default
#line hidden
WriteLiteral("\r\n    </div>\r\n</div></body>\r\n</html>\r\n");

}
}

// NOTE: this is the default generated helper class. You may choose to extract it to a separate file 
// in order to customize it or share it between multiple templates, and specify the template's base 
// class via the @inherits directive.
public abstract class ChecklistRazorViewBase
{

		// This field is OPTIONAL, but used by the default implementation of Generate, Write, WriteAttribute and WriteLiteral
		//
		System.IO.TextWriter __razor_writer;

		// This method is OPTIONAL
		//
		/// <summary>Executes the template and returns the output as a string.</summary>
		/// <returns>The template output.</returns>
		public string GenerateString ()
		{
			using (var sw = new System.IO.StringWriter ()) {
				Generate (sw);
				return sw.ToString ();
			}
		}

		// This method is OPTIONAL, you may choose to implement Write and WriteLiteral without use of __razor_writer
		// and provide another means of invoking Execute.
		//
		/// <summary>Executes the template, writing to the provided text writer.</summary>
		/// <param name="writer">The TextWriter to which to write the template output.</param>
		public void Generate (System.IO.TextWriter writer)
		{
			__razor_writer = writer;
			Execute ();
			__razor_writer = null;
		}

		// This method is REQUIRED, but you may choose to implement it differently
		//
		/// <summary>Writes a literal value to the template output without HTML escaping it.</summary>
		/// <param name="value">The literal value.</param>
		protected void WriteLiteral (string value)
		{
			__razor_writer.Write (value);
		}

		// This method is REQUIRED if the template contains any Razor helpers, but you may choose to implement it differently
		//
		/// <summary>Writes a literal value to the TextWriter without HTML escaping it.</summary>
		/// <param name="writer">The TextWriter to which to write the literal.</param>
		/// <param name="value">The literal value.</param>
		protected static void WriteLiteralTo (System.IO.TextWriter writer, string value)
		{
			writer.Write (value);
		}

		// This method is REQUIRED, but you may choose to implement it differently
		//
		/// <summary>Writes a value to the template output, HTML escaping it if necessary.</summary>
		/// <param name="value">The value.</param>
		/// <remarks>The value may be a Action<System.IO.TextWriter>, as returned by Razor helpers.</remarks>
		protected void Write (object value)
		{
			WriteTo (__razor_writer, value);
		}

		// This method is REQUIRED if the template contains any Razor helpers, but you may choose to implement it differently
		//
		/// <summary>Writes an object value to the TextWriter, HTML escaping it if necessary.</summary>
		/// <param name="writer">The TextWriter to which to write the value.</param>
		/// <param name="value">The value.</param>
		/// <remarks>The value may be a Action<System.IO.TextWriter>, as returned by Razor helpers.</remarks>
		protected static void WriteTo (System.IO.TextWriter writer, object value)
		{
			if (value == null)
				return;

			var write = value as Action<System.IO.TextWriter>;
			if (write != null) {
				write (writer);
				return;
			}

			//NOTE: a more sophisticated implementation would write safe and pre-escaped values directly to the
			//instead of double-escaping. See System.Web.IHtmlString in ASP.NET 4.0 for an example of this.
			writer.Write(System.Net.WebUtility.HtmlEncode (value.ToString ()));
		}

		// This method is REQUIRED, but you may choose to implement it differently
		//
		/// <summary>
		/// Conditionally writes an attribute to the template output.
		/// </summary>
		/// <param name="name">The name of the attribute.</param>
		/// <param name="prefix">The prefix of the attribute.</param>
		/// <param name="suffix">The suffix of the attribute.</param>
		/// <param name="values">Attribute values, each specifying a prefix, value and whether it's a literal.</param>
		protected void WriteAttribute (string name, string prefix, string suffix, params Tuple<string,object,bool>[] values)
		{
			WriteAttributeTo (__razor_writer, name, prefix, suffix, values);
		}

		// This method is REQUIRED if the template contains any Razor helpers, but you may choose to implement it differently
		//
		/// <summary>
		/// Conditionally writes an attribute to a TextWriter.
		/// </summary>
		/// <param name="writer">The TextWriter to which to write the attribute.</param>
		/// <param name="name">The name of the attribute.</param>
		/// <param name="prefix">The prefix of the attribute.</param>
		/// <param name="suffix">The suffix of the attribute.</param>
		/// <param name="values">Attribute values, each specifying a prefix, value and whether it's a literal.</param>
		///<remarks>Used by Razor helpers to write attributes.</remarks>
		protected static void WriteAttributeTo (System.IO.TextWriter writer, string name, string prefix, string suffix, params Tuple<string,object,bool>[] values)
		{
			// this is based on System.Web.WebPages.WebPageExecutingBase
			// Copyright (c) Microsoft Open Technologies, Inc.
			// Licensed under the Apache License, Version 2.0
			if (values.Length == 0) {
				// Explicitly empty attribute, so write the prefix and suffix
				writer.Write (prefix);
				writer.Write (suffix);
				return;
			}

			bool first = true;
			bool wroteSomething = false;

			for (int i = 0; i < values.Length; i++) {
				Tuple<string,object,bool> attrVal = values [i];
				string attPrefix = attrVal.Item1;
				object value = attrVal.Item2;
				bool isLiteral = attrVal.Item3;

				if (value == null) {
					// Nothing to write
					continue;
				}

				// The special cases here are that the value we're writing might already be a string, or that the
				// value might be a bool. If the value is the bool 'true' we want to write the attribute name instead
				// of the string 'true'. If the value is the bool 'false' we don't want to write anything.
				//
				// Otherwise the value is another object (perhaps an IHtmlString), and we'll ask it to format itself.
				string stringValue;
				bool? boolValue = value as bool?;
				if (boolValue == true) {
					stringValue = name;
				} else if (boolValue == false) {
					continue;
				} else {
					stringValue = value as string;
				}

				if (first) {
					writer.Write (prefix);
					first = false;
				} else {
					writer.Write (attPrefix);
				}

				if (isLiteral) {
					writer.Write (stringValue ?? value);
				} else {
					WriteTo (writer, stringValue ?? value);
				}
				wroteSomething = true;
			}
			if (wroteSomething) {
				writer.Write (suffix);
			}
		}
		// This method is REQUIRED. The generated Razor subclass will override it with the generated code.
		//
		///<summary>Executes the template, writing output to the Write and WriteLiteral methods.</summary>.
		///<remarks>Not intended to be called directly. Call the Generate method instead.</remarks>
		public abstract void Execute ();

}
}
#pragma warning restore 1591
